Код состоит из следующих файлов:

main.py - основной скрипт
testgenlib.py - библиотека со вспомогательными функциями и классами
config.py - текстовые заготовки

В config.py только текстовые заготовки, использующиеся при выводе, чтобы сам код не выглядел очень загромождённо.
В testgenlib.py реализация дерева с небольшими улучшениями для скрипта, также несколько функций обхода

main.py состоит из следующих частей:
1. Обход файлов в целевой папке (206-226)
2. Дополнительная обработка получившихся данных (231-280)
3. Вывод отладочной информации (282-301)
4. Запись питоновского файла (304-449)
5. Запись си-шного файла (451-510)

Что уже работает:
1. Создание используемых кодом структур
2. Генерация дерева вариантов в пределах одной функции
3. Вычленение используемых полей для каждой функции, должно минимизировать количество данных для работы

Что ещё не работает:
1. Обработка enum
2. Обработка switch
3. Создание дерева вариантов с использованием подцеплений при нахождении ссылки на другую функцию
4. Автодобавление #include в си-шный заголовок
5. Генерация .h файла со стабированным регистром (память -> экземпляр переменной)
6. Генерация имени файла
7. (опционально) переписать парсер на ООП, изначально программа не была такой комплексной. Сейчас это может решить пару
проблем

Возможные проблемы:
На данном этапе частично реализована попытка минимизировать количество структур для использования. Это может вызвать
проблемы при отлаживании кода. Чтобы убрать "умную" генерацию, необходимо убрать следующую проверку:
if key in global_used_struct_fields: (325, 345, 385, 398)
В результате будет построено полное дерево вариантов и полные структуры.

